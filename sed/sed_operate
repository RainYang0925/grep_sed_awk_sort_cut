sed全名叫stream editor，流编辑器，用程序的方式来编辑文本，相当的hacker啊。
sed基本上就是玩正则模式匹配，所以，玩sed的人，正则表达式一般都比较强。
sed主要是针对行数据进行操作


1.
sed "s/my/weikai's/g" pets.txt        //s表示替换命令，/my/表示匹配my，/Hao Chen’s/表示把匹配替换成weikai’s，/g 表示一行上的替换所有的匹配
                                      注意：如果你要使用单引号，那么你没办法通过\’这样来转义，就有双引号就可以了，在双引号内可以用\”来转义。
再注意：上面的sed并没有对文件的内容改变，只是把处理过后的内容输出，如果你要写回文件，你可以使用重定向，如：
 sed "s/my/weikai's/g" pets.txt > tmp.txt
或使用 -i 参数直接修改文件内容：	
$ sed -i "s/my/weikai's/g" pets.txt


2.
 sed 's/^/#/g' pets.txt            //在每一行最前面加点东西
 sed 's/$/ --- /g' pets.txt        // 在每一行最后面加点东西


顺手介绍一下正则表达式的一些最基本的东西：
    ^ 表示一行的开头。如：/^#/ 以#开头的匹配。
    $ 表示一行的结尾。如：/}$/ 以}结尾的匹配。
    \< 表示词首。 如 \<abc 表示以 abc 为首的詞。
    \> 表示词尾。 如 abc\> 表示以 abc 結尾的詞。
    . 表示任何单个字符。
    * 表示某个字符出现了0次或多次。
    [ ] 字符集合。 如：[abc]表示匹配a或b或c，还有[a-zA-Z]表示匹配所有的26个字符。如果其中有^表示反，如[^a]表示非a的字符


# 其中的'[^>]' 指定了除了>的字符重复0次或多次。
sed 's/<[^>]*>//g' html.txt          //我们要去掉某html中的tags
sed "3s/my/your/g" pets.txt          //将第三行中的my替换为your     

下面的命令只替换第3到第6行的文本。
 sed "3,6s/my/your/g" pets.txt

只替换每一行的第一个s：
 sed 's/s/S/1' pets.txt

只替换每一行的第二个s：
 sed 's/s/S/2' pets.txt

替换第一行的第3个以后的所有s：
 sed 's/s/S/3g' pets.txt


如果我们需要一次替换多个模式，可参看下面的示例：
（第一个模式把第一行到第三行的my替换成your，第二个则把第3行以后的This替换成了That）
 sed '1,3s/my/your/g; 3,$s/This/That/g' pets.txt
 也可以这样写：
 sed  -e '1,3s/my/your/g' -e '3,$s/This/That/g' pets.txt



sed 's/This is my \([^,]*\),.*is \(.*\)/\1:\2/g' pets.txt
可以使用-E就不用转意括号了
 sed -E 's/This is my ([^,]*),.*is (.*)/\1:\2/g' pets.txt 
正则为：This is my ([^,]*),.*is (.*)
匹配为：This is my (cat),……….is (betty)

然后：\1就是cat，\2就是betty

其中的1i表明，其要在第1行前插入一行（insert）
sed "1i This is my monkey, my monkey's name is wukong" pets.txt
其中的1a表明，其要在第1行后追加一行（append）
sed "1a This is my monkey, my monkey's name is wukong" pets.txt

其中的a表明，要在每一行后面都要追加一行(append)
sed "a This is my monkey, my monkey's name is wukong" pets.txt

其中的$a表明，要在最后一行后面追加一行(append)
sed "$a This is my monkey, my monkey's name is wukong" pets.txt
在匹配fish的每一行后面添加一行(append)
 sed "/fish/a This is my monkey, my monkey's name is wukong" pets.txt
在匹配fish的每一行前面插入一行(insert)
 sed "/fish/i This is my monkey, my monkey's name is wukong" pets.txt

 c 命令是替换匹配行
 sed "2 c This is my monkey, my monkey's name is wukong" pets.txt
 d 命令删除匹配行
 sed '/fish/d' pets.txt
 sed '2d' pets.txt
 sed '2,$d' pets.txt

 p打印命令
 匹配fish并输出，可以看到fish的那一行被打了两遍，
  这是因为sed处理时会把处理的信息输出
   sed '/fish/p' pets.txt
 使用n参数只会打印处理的信息
 sed -n '/fish/p' pets.txt
 打印匹配cat的行道匹配fish的行
 sed -n '/cat/,/fish/p' pets.txt

从第一行打印到匹配fish成功的那一行
sed -n '1,/fish/p' pets.txt

注意:使用的p命令的时候最好前边加上n参数